;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(project--dir-history grep-files-history grep-regexp-history goto-line-history command-history read-char-history compile-history yes-or-no-p-history eglot-command-history minibuffer-history file-name-history buffer-name-history extended-command-history))
(setq grep-files-history '(".gitignore"))
(setq grep-regexp-history '("init_physics"))
(setq goto-line-history '("31" "2"))
(setq command-history '((find-file "~/Arduino/send_data/host/page.h" t) (find-file "~/Arduino/send_data/host/index.h" t) (find-file "~/Arduino/send_data/host/page.h" t) (find-file "~/Arduino/send_data/host/index.h" t) (find-file "~/Arduino/send_data/host/index.h" t) (find-file "~/Arduino/" t) (eldoc-mode 'toggle) (execute-extended-command nil "eldoc-mode" "eldo") (eldoc-mode 'toggle) (execute-extended-command nil "eldoc-mode" "eldoc") (eldoc t) (execute-extended-command nil "eldoc" "eldo") (eglot '(java-mode java-ts-mode) '(transient . "/tmp/") 'eglot-lsp-server '("/usr/bin/jdtls") '("java" "java") t) (execute-extended-command nil "eglot" "eglo") (rename-file "/tmp/me.java" "/tmp/main.java" 1) (execute-extended-command nil "rename-file" "rename") (find-file "/tmp/me.java" t) (switch-to-buffer "*~-eshell*" nil 'force-same-window) (find-file "/tmp/me.java" t) (project-eshell) (execute-extended-command nil "project-eshell" "eshell") (find-file "~/mine.c" t) (eshell-kill-process) (execute-extended-command nil "eshell-kill-process" "eshell") (eshell-mode) (execute-extended-command nil "eshell-mode") (switch-to-buffer "mine.c" nil 'force-same-window) (find-file "~/mine" t) (eshell-mode) (execute-extended-command nil "eshell-mode" "shell-mode") (find-file "~/mine.c" t) (describe-key '(("f" . [102]))) (find-file "~/.emacs.d/init.el" t) (eval-buffer) (execute-extended-command nil "eval-buffer" "eval") (eval-buffer) (execute-extended-command nil "eval-buffer" "eval") (find-file "/home/UG/.emacs.d/init.el" t) (eglot '(python-mode python-ts-mode) '(transient . "/tmp/") 'eglot-lsp-server '("/usr/bin/pyright-langserver" "--stdio") '("python" "python") t) (execute-extended-command nil "eglot" "eglot") (find-file "/tmp/mine.py" t) (find-file "~/programming/magic_ruin/main.c" t) (list-packages nil) (execute-extended-command nil "list-packages" "listpa") (rgrep "init_physics" ".gitignore" "~/programming/magic_ruin/") (execute-extended-command nil "rgrep" "rg") (goto-line 31 nil) (execute-extended-command nil "goto-line" "goto") (eglot-find-declaration) (execute-extended-command nil "eglot-find-declaration" "eglot") (eglot-find-implementation) (execute-extended-command nil "eglot-find-implementation" "eglot") (xref-find-references "LSP identifier at point") (execute-extended-command nil "xref-find-references" "find-ref") (eglot '(c-mode c-ts-mode c++-mode c++-ts-mode objc-mode) '(vc Git "~/programming/magic_ruin/") 'eglot-lsp-server '("/usr/bin/clangd") '("c" "c" "c++" "c++" "objc") t) (execute-extended-command nil "eglot" "eglo") (find-file "~/programming/magic_ruin/" t) (company-yasnippet 'interactive) (execute-extended-command nil "company-yasnippet" "yas") (company-yasnippet 'interactive) (execute-extended-command nil "company-yasnippet" "yasni") (find-file "/tmp/mi.c" t) (update-directory-autoloads "/tmp/") (execute-extended-command nil "update-directory-autoloads" "update") (vc-update nil) (execute-extended-command nil "vc-update" "upda") (delete-file "/tmp/.##mi.c#" t) (execute-extended-command nil "delete-file" "dele") (delete-file "/tmp/.#mi.c" t) (execute-extended-command nil "delete-file") (delete-file "/tmp/#mi.c#" t) (execute-extended-command nil "delete-file" "dele") (find-file "/tmp/" t) (eglot nil '(transient . "/tmp/") 'eglot-lsp-server nil nil t) (execute-extended-command nil "eglot" "eglo") (find-file "/tmp/#mi.c#" t) (package-install 'yasnippet-snippets nil) (execute-extended-command nil "package-install" "inst") (eglot '(java-mode java-ts-mode) '(transient . "/tmp/") 'eglot-lsp-server '("/usr/bin/jdtls") '("java" "java") t) (execute-extended-command nil "eglot" "eglo") (find-file "/tmp/me.java" t) (switch-to-buffer "mi.c" nil 'force-same-window) (yas-new-snippet nil) (execute-extended-command nil "yas-new-snippet" "snippet") (yas-load-snippet-buffer 'tmp t) (execute-extended-command nil "yas-load-snippet-buffer" "snippet") (eglot '(c-mode c-ts-mode c++-mode c++-ts-mode objc-mode) '(transient . "/tmp/") 'eglot-lsp-server '("/usr/bin/clangd") '("c" "c" "c++" "c++" "objc") t) (execute-extended-command nil "eglot") (find-file "/tmp/mi.c" t) (eglot '(python-mode python-ts-mode) '(transient . "/tmp/") 'eglot-lsp-server '("/usr/bin/pyright-langserver" "--stdio") '("python" "python") t) (execute-extended-command nil "eglot") (find-file "/tmp/mine.py" t)))
(setq compile-history '("make -k " "gcc mine.c -o mine"))
(setq yes-or-no-p-history '("yes"))
(setq eglot-command-history '("python" "java" "el" "clang" "c"))
(setq minibuffer-history '("yasnippet-snippets" "tmp" "yasnippet" "malloc-info" "eglot-jl"))
(setq file-name-history '("~/Arduino/send_data/host/page.h" "~/Arduino/send_data/host/index.h" "~/Arduino/send_data/host/page.h" "~/Arduino/send_data/host/index.h" "~/Arduino/" "/tmp/main.java" "/tmp/me.java" "~/" "~/mine.c" "~/mine" "~/mine.c" "~/.emacs.d/init.el" "/home/UG/.emacs.d/init.el" "/tmp/mine.py" "~/programming/magic_ruin/main.c" "~/programming/magic_ruin/" "/tmp/mi.c" "/tmp/" "/tmp/.##mi.c#" "/tmp/.#mi.c" "/tmp/#mi.c#" "/tmp/" "/tmp/#mi.c#" "/tmp/me.java" "/tmp/mi.c" "/tmp/mine.py" "/tmp/me.java" "~/.emacs.d/" "~/mine.c" "~/.emacs.d/"))
(setq buffer-name-history '("*~-eshell*" "mine.c" "mi.c" "*Backtrace*" "init.el" "*eshell*" "mine.c" "mine.c<UG>"))
(setq extended-command-history '("eldoc-mode" "eldoc" "eglot" "rename-file" "project-eshell" "eshell-kill-process" "eshell-mode" "eval-buffer" "eglot" "list-packages" "rgrep" "goto-line" "eglot-find-declaration" "eglot-find-implementation" "xref-find-references" "eglot" "company-yasnippet" "update-directory-autoloads" "vc-update" "delete-file" "eglot" "package-install" "eglot" "yas-new-snippet" "yas-load-snippet-buffer" "eglot" "eldoc" "eglot" "snippet-mode" "eglot-list-connections" "eglot" "eval-buffer" "eglot" "kill-buffer" "compile" "eglot" "package-install" "eglot" "package-install" "list-packages" "eval-buffer" "eshell" "kill-buffer"))
